* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: "Poppins", sans-serif;
}

.container {
  margin: 30px auto;

  /* width: 1100px is a common size for wide-screens. Apparently, we'll be using it alot (not sure) */
  /* width: 1100px; */

  /* This container is fine when the view is 1100px+ wide. However, less than that, you start to see 
  issues regarding text. So, the solution is to use max-width so that it's MAX 1100px but can shrink */
  /* max-width: 1100px; */

  /* You can also use % unit. % is a percentage of the parent container/element. So, here it'll be a
  percentage of <body> and <body> is the size of the viewport so a % of it is a % of the viewport */
  /* width: 85%; */

  /* Using max-width + px unit is recommended (at least Brad says that). Because a percentage leaves
  a very large space on the sides for very small screens/devices. Which is not optimal. */

  /* You can use a combination between width (percentage) and max-width (pixels) so that it scales
  with the container BUT it doesn't scale infinitely, there's a stopping point (max-width).*/
  width: 85%;
  max-width: 1100px;
}

/* Notice that for the image, it scales outside of the container EVEN THOUGH the container is set to 85%
Images tend to work that way. Therefore, a good practice is to define max-width for img as 100%.
That way, you're telling images never to pass the container's size. Which is responsive. */

img {
  max-width: 100%;
}

/* When not to use percentages:

1- Fixed-sized elements (use px for that)
2- Font sizes (for responsiveness, it'll be em and rem)
3- Precise Positioning (percentages scale, precise positioning is about being at the exact number of pixels
wanted)
4- Nested percentages values (unpredictable when it scales with a container that scales, very confusing)
*/
